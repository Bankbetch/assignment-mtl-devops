---
apiVersion: {{ if .Values.enabledArgoRollouts }}argoproj.io/v1alpha1{{ else }}apps/v1{{ end }}
kind: {{ if .Values.enabledArgoRollouts }}Deployment{{ else }}Rollout{{ end }}Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.app.namespace }}
  labels:
    app: {{ .Release.Name }}
  {{- if .Values.app.annotations }}
  annotations:
  {{- range $key, $value := .Values.app.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- end }}
spec:
  {{- if .Values.app.replicas }}
  replicas: {{ .Values.app.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
  {{- if and .Values.app.strategy .Values.app.strategy.blueGreen }}
    blueGreen:
        autoPromotionEnabled: {{ .Values.app.strategy.blueGreen.autoPromotionEnabled | default false }}
        scaleDownDelaySeconds: {{ .Values.app.strategy.blueGreen.scaleDownDelaySeconds | default 30  }}
        activeService: {{ .Release.Name }}
        previewService: {{ .Release.Name }}-preview
  {{- else }}
{{ toYaml .Values.app.strategy | indent 4 }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.app.revisionHistoryLimit | default 5 }}
  template:
    metadata:
      # annotations:
      #   linkerd.io/inject: enabled
      labels:
        app: {{ .Release.Name }}
    spec:
      {{- if .Values.app.topologySpreadConstraints }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }}
      {{- end }}
      {{- if .Values.app.affinity }}
      affinity: 
{{ toYaml .Values.app.affinity | indent 8 }}
      {{- else if .Values.app.affinityMultiAZ }}
      affinity: 
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Release.Name }}
                topologyKey: topology.kubernetes.io/zone
      {{- end }}
      {{- if .Values.app.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.app.terminationGracePeriodSeconds }}
      {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.app.image }}:{{ .Values.app.tag }}
        imagePullPolicy: {{ .Values.app.pullPolicy | default "IfNotPresent" }}
        {{- if .Values.app.containers.command }}
        command: {{ .Values.app.containers.command }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.app.port }}
          name: web-port
          protocol: TCP
        {{- if .Values.app.lifecycle }}
        lifecycle:
{{ toYaml .Values.app.lifecycle | indent 10 }}
        {{- end }}
      # volumes
        {{- if .Values.volumes }}
        volumeMounts:
        {{- range .Values.volumes.volumeMounts }}
          - name: {{ .name | quote }}
            mountPath: {{ .mountPath }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
            readOnly: {{ .readOnly | default false }}
          {{- end }}
          
          {{- range .Values.volumes.emptyDir }}
          - name: {{ .name | quote }}
            mountPath: {{ .mountPath }}
          {{- end }}
          
          {{- range $key, $cm := .Values.volumes.configMap }}
          {{- range $k, $value := $cm.subPath }}
          - name: {{ $value.name | quote }}
            mountPath: {{ .mountPath }}
            subPath: {{ $value.subPath }}
            readOnly: {{ .readOnly | default false }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .Values.app.customHealthCheck }}
{{ toYaml .Values.app.customHealthCheck | indent 8 }}
        {{- end }}
        {{- if .Values.app.healthCheckPath }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.healthCheckPath.liveness }}
            port: {{ .Values.app.port }}
            scheme: HTTP
          timeoutSeconds: {{ .Values.app.healthCheckPath.timeoutSeconds | default 10 }}
          initialDelaySeconds: {{ .Values.app.healthCheckPath.initialDelaySeconds | default 4 }}
          periodSeconds: {{ .Values.app.healthCheckPath.periodSeconds | default 10 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.app.healthCheckPath.readiness }}
            port: {{ .Values.app.port }}
            scheme: HTTP
          timeoutSeconds: {{ .Values.app.healthCheckPath.timeoutSeconds | default 10 }}
          initialDelaySeconds: {{ .Values.app.healthCheckPath.initialDelaySeconds | default 4 }}
          periodSeconds: {{ .Values.app.healthCheckPath.periodSeconds | default 10 }}
        {{- end }}
        {{- if .Values.extraEnv }}
        env:
        {{- range $key, $value := .Values.extraEnv }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.envFrom }}
        envFrom:
          - secretRef:
              name: {{ .Values.envFrom }}
        {{- end }}
        {{- if .Values.app.resources}}
        resources:
{{ toYaml .Values.app.resources | indent 10 }}
        {{- end }}
      imagePullSecrets:
      - name: {{ .Values.app.imagePullSecrets }}
      {{- if .Values.volumes }}
      volumes:
      {{- range .Values.volumes.emptyDir }}
        - name: {{ .name }}
          emptyDir: {}
        {{- end }}
      {{- range .Values.volumes.pvc }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ .claimName }}
        {{- end }}
        
        {{- range $key, $cm := .Values.volumes.configMap }}
        {{- range $k, $value := $cm.subPath }}
        - name: {{ $value.name }}
          configMap:
            name: {{ $cm.name }}
            defaultMode: {{ $value.defaultMode | default "420" }}
        {{- end }}
        {{- end }}
        
        {{- range .Values.volumes.hostPath }}
        - name: {{ .name }}
        {{- if .path }}
          hostPath:
            path: {{ .path }}
        {{- end }}
        {{- if .secret }}
          secret:
            secretName: {{ .secret.secretName }}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}